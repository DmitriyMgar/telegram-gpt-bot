from logger import logger
import os
import asyncio
import tempfile
from pathlib import Path

from telegram import Update, BotCommand
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
from config import TELEGRAM_BOT_TOKEN, CHANNEL_ID
from openai_handler import send_message_and_get_response, get_message_history, export_message_history, send_image_and_get_response
from session_manager import reset_thread
from telegram.constants import ChatAction
from subscription_checker import check_channel_subscription
from user_analytics import analytics

# –ü—É—Ç—å –¥–æ –ª–æ–≥-—Ñ–∞–π–ª–∞
LOG_FILE = os.path.join(os.path.dirname(__file__), "bot.log")

def get_username(update: Update) -> str:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫—É.
    
    Args:
        update: Telegram Update –æ–±—ä–µ–∫—Ç
        
    Returns:
        str: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ fallback –∑–Ω–∞—á–µ–Ω–∏–µ
    """
    user = update.effective_user
    return user.username or user.first_name or f"user_{user.id}"

async def is_authorized_async(user_id: int) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª.
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
        
    Returns:
        bool: True –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω (–ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª)
    """
    try:
        return await check_channel_subscription(TELEGRAM_BOT_TOKEN, CHANNEL_ID, user_id)
    except Exception as e:
        logger.error(f"[Authorization] Error checking subscription for user {user_id}: {e}")
        return False

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    username = update.effective_user.username or "Unknown"
    logger.info(f"[Start] User {user_id} (@{username}) started the bot")
    
    if not await is_authorized_async(user_id):
        await update.message.reply_text(
            "üîê **–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª**\n\n"
            "**Telegram GPT Bot** - —É–º–Ω—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏:\n"
            "‚Ä¢ ü§ñ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–µ –æ–±—â–µ–Ω–∏–µ —Å –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º\n"
            "‚Ä¢ üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –≤—Å–µ—Ö –≤–∞—à–∏—Ö –¥–∏–∞–ª–æ–≥–æ–≤\n"
            "‚Ä¢ üß† –ü–æ–Ω–∏–º–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ –≤–µ–¥–µ–Ω–∏–µ –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã—Ö –±–µ—Å–µ–¥\n"
            "‚Ä¢ üñºÔ∏è –ê–Ω–∞–ª–∏–∑ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n"
            "‚Ä¢ üìÅ –≠–∫—Å–ø–æ—Ä—Ç –ø–µ—Ä–µ–ø–∏—Å–∫–∏ –≤ —É–¥–æ–±–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ\n\n"
            "**–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞:**\n"
            "1Ô∏è‚É£ –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª: https://t.me/logloss_notes\n"
            "2Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ \"–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è\" –≤ –∫–∞–Ω–∞–ª–µ\n"
            "3Ô∏è‚É£ –í–µ—Ä–Ω–∏—Ç–µ—Å—å —Å—é–¥–∞ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
            "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –≤–∞–º —Å—Ç–∞–Ω—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞!\n"
            "*–ü–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏*"
        )
        return
    
    await update.message.reply_text(
        "ü§ñ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Telegram GPT Bot!**\n\n"
        "–Ø - –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏:\n"
        "‚Ä¢ üí¨ **–£–º–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏** - –ø–æ–Ω–∏–º–∞—é –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ –≤–µ–¥—É –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–µ –±–µ—Å–µ–¥—ã\n"
        "‚Ä¢ üß† **–ü–∞–º—è—Ç—å** - –ø–æ–º–Ω—é –≤—Å—é –Ω–∞—à—É –∏—Å—Ç–æ—Ä–∏—é –æ–±—â–µ–Ω–∏—è\n"
        "‚Ä¢ üìö **–ù–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç—å** - –Ω–∞—à –¥–∏–∞–ª–æ–≥ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—Å—è –¥–∞–∂–µ –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Ä—ã–≤–æ–≤\n"
        "‚Ä¢ üñºÔ∏è **–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π** - –º–æ–≥—É –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏ –æ–ø–∏—Å—ã–≤–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–∏\n"
        "‚Ä¢ üìÅ **–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ** - –º–æ–∂–µ—Ç–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ª—é–±—É—é –±–µ—Å–µ–¥—É\n\n"
        "**–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:**\n"
        "‚Ä¢ –ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –ª—é–±–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–¥–ø–∏—Å—å—é –∏–ª–∏ –±–µ–∑\n"
        "‚Ä¢ `/reset` - –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –±–µ—Å–µ–¥—É —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞\n"
        "‚Ä¢ `/history` - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
        "‚Ä¢ `/export` - —Å–∫–∞—á–∞—Ç—å –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é –æ–±—â–µ–Ω–∏—è\n"
        "‚Ä¢ `/subscribe` - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –¥–æ—Å—Ç—É–ø–∞\n\n"
        "–ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å –ª—é–±—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏! –ù–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—Å–∞–≤ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ üöÄ"
    )

async def reset(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not await is_authorized_async(user_id):
        await update.message.reply_text(
            "üö´ –î–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –æ–≥—Ä–∞–Ω–∏—á–µ–Ω!\n\n"
            "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª:\n"
            "üëâ https://t.me/logloss_notes\n\n"
            "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
        return
    
    reset_thread(user_id)
    await update.message.reply_text("–ò—Å—Ç–æ—Ä–∏—è —Å–±—Ä–æ—à–µ–Ω–∞.")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not await is_authorized_async(user_id):
        await update.message.reply_text(
            "üö´ –î–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –æ–≥—Ä–∞–Ω–∏—á–µ–Ω!\n\n"
            "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª:\n"
            "üëâ https://t.me/logloss_notes\n\n"
            "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
        return
    
    user_message = update.message.text
    username = get_username(update)
    await update.message.chat.send_action(action="typing")
    logger.info(f"Message from {user_id} (@{username}): {user_message}")

    reply = await send_message_and_get_response(user_id, user_message, username)
    await update.message.reply_text(reply)

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle photo messages with optional caption"""
    user_id = update.effective_user.id
    if not await is_authorized_async(user_id):
        await update.message.reply_text(
            "üö´ –î–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –æ–≥—Ä–∞–Ω–∏—á–µ–Ω!\n\n"
            "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª:\n"
            "üëâ https://t.me/logloss_notes\n\n"
            "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
        return
    
    username = get_username(update)
    caption = update.message.caption or ""
    
    await update.message.chat.send_action(action="typing")
    logger.info(f"Photo message from {user_id} (@{username}) with caption: {caption}")
    
    try:
        # Get the largest photo size
        photo = update.message.photo[-1]
        
        # Check file size (max 20MB as per Telegram limit)
        if photo.file_size > 20 * 1024 * 1024:
            await update.message.reply_text(
                "üö´ –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: 20MB"
            )
            return
        
        # Get file info
        file = await context.bot.get_file(photo.file_id)
        
        # Create temporary file
        temp_dir = Path(tempfile.gettempdir()) / "telegram_bot_images"
        temp_dir.mkdir(exist_ok=True)
        
        # Generate unique filename
        file_extension = Path(file.file_path).suffix.lower()
        if file_extension not in ['.jpg', '.jpeg', '.png', '.webp']:
            await update.message.reply_text(
                "üö´ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ñ–æ—Ä–º–∞—Ç—ã: JPEG, PNG, WebP"
            )
            return
        
        temp_file_path = temp_dir / f"image_{user_id}_{photo.file_unique_id}{file_extension}"
        
        # Download image using Telegram Bot API
        await file.download_to_drive(temp_file_path)
        
        # Process image with OpenAI
        reply = await send_image_and_get_response(user_id, str(temp_file_path), caption, username)
        await update.message.reply_text(reply)
        
    except Exception as e:
        logger.error(f"Error processing photo from user {user_id}: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    finally:
        # Cleanup temporary file
        try:
            if 'temp_file_path' in locals() and temp_file_path.exists():
                temp_file_path.unlink()
        except Exception as e:
            logger.error(f"Error cleaning up temp file: {e}")

async def history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not await is_authorized_async(user_id):
        await update.message.reply_text(
            "üö´ –î–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –æ–≥—Ä–∞–Ω–∏—á–µ–Ω!\n\n"
            "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª:\n"
            "üëâ https://t.me/logloss_notes\n\n"
            "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
        return

    await update.message.chat.send_action(action="typing")
    reply = await get_message_history(user_id)
    await update.message.reply_text(reply)

async def export(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not await is_authorized_async(user_id):
        await update.message.reply_text(
            "üö´ –î–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –æ–≥—Ä–∞–Ω–∏—á–µ–Ω!\n\n"
            "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª:\n"
            "üëâ https://t.me/logloss_notes\n\n"
            "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
        return

    await update.message.chat.send_action(action=ChatAction.UPLOAD_DOCUMENT)
    file_path = await export_message_history(user_id)

    if file_path and os.path.exists(file_path):
        with open(file_path, "rb") as f:
            await update.message.reply_document(f, filename="chat_history.txt")
        os.remove(file_path)
    else:
        await update.message.reply_text("–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ.")

async def subscribe(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –æ –ø–æ–¥–ø–∏—Å–∫–µ –Ω–∞ –∫–∞–Ω–∞–ª"""
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
    is_subscribed = await is_authorized_async(user_id)
    
    if is_subscribed:
        await update.message.reply_text(
            "‚úÖ **–û—Ç–ª–∏—á–Ω–æ! –£ –≤–∞—Å –µ—Å—Ç—å –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É**\n\n"
            "**Telegram GPT Bot –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!**\n\n"
            "**–í–∞—à–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**\n"
            "‚Ä¢ ü§ñ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ —Å AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º\n"
            "‚Ä¢ üß† –ë–æ—Ç –ø–æ–º–Ω–∏—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤—Å–µ–π –±–µ—Å–µ–¥—ã\n"
            "‚Ä¢ üíæ –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–æ–≤ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n"
            "‚Ä¢ üìÅ –≠–∫—Å–ø–æ—Ä—Ç –ø–µ—Ä–µ–ø–∏—Å–∫–∏ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç\n"
            "‚Ä¢ üñºÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n\n"
            "**–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:**\n"
            "‚Ä¢ `/reset` - –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –±–µ—Å–µ–¥—É —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞\n"
            "‚Ä¢ `/history` - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π\n"
            "‚Ä¢ `/export` - —Å–∫–∞—á–∞—Ç—å –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é –æ–±—â–µ–Ω–∏—è\n"
            "‚Ä¢ `/subscribe` - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å (—ç—Ç–∞ –∫–æ–º–∞–Ω–¥–∞)\n\n"
            "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–∞—á–∞–ª–∞ –¥–∏–∞–ª–æ–≥–∞! üöÄ"
        )
    else:
        await update.message.reply_text(
            "üì¢ **–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª**\n\n"
            "**–ß—Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –ø–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏:**\n"
            "‚Ä¢ ü§ñ –£–º–Ω—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –ª—é–±—ã—Ö –∑–∞–¥–∞—á\n"
            "‚Ä¢ üí¨ –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏ —Å –ø–æ–Ω–∏–º–∞–Ω–∏–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞\n"
            "‚Ä¢ üìö –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–µ –±–µ—Å–µ–¥—ã - –±–æ—Ç –ø–æ–º–Ω–∏—Ç –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é\n"
            "‚Ä¢ üìÅ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø–µ—Ä–µ–ø–∏—Å–∫–∏\n"
            "‚Ä¢ üñºÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n"
            "‚Ä¢ üîÑ –°–µ—Å—Å–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –¥–∞–∂–µ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞\n\n"
            "**–ü—Ä–æ—Å—Ç—ã–µ —à–∞–≥–∏ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:**\n"
            "1Ô∏è‚É£ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: https://t.me/logloss_notes\n"
            "2Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ \"–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–∞–Ω–∞–ª—É\"\n"
            "3Ô∏è‚É£ –í–µ—Ä–Ω–∏—Ç–µ—Å—å —Å—é–¥–∞ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
            "**–ü–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!**\n"
            "–î–æ—Å—Ç—É–ø –æ—Ç–∫—Ä–æ–µ—Ç—Å—è —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ ‚ú®"
        )

def init_analytics_sync():
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏."""
    try:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π event loop –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        loop.run_until_complete(analytics.init_database())
        logger.info("Analytics database initialized successfully")
        # –ù–ï –∑–∞–∫—Ä—ã–≤–∞–µ–º loop, –æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è telegram-bot
    except Exception as e:
        logger.error(f"Failed to initialize analytics database: {e}")

async def setup_bot_commands(bot):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–µ–Ω—é –∫–æ–º–∞–Ω–¥ –¥–ª—è –±–æ—Ç–∞."""
    commands = [
        BotCommand("start", "üöÄ –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"),
        BotCommand("reset", "üîÑ –ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é –±–µ—Å–µ–¥—É"),
        BotCommand("history", "üìù –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π"),
        BotCommand("export", "üìÅ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞"),
        BotCommand("subscribe", "üì¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏")
    ]
    try:
        await bot.set_my_commands(commands)
        logger.info("Bot commands menu set successfully")
    except Exception as e:
        logger.error(f"Failed to set bot commands: {e}")

def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É
    init_analytics_sync()
    
    app = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ–Ω—é –∫–æ–º–∞–Ω–¥
    app.job_queue.run_once(lambda context: asyncio.create_task(setup_bot_commands(context.bot)), when=1)

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("reset", reset))
    app.add_handler(CommandHandler("history", history))
    app.add_handler(CommandHandler("export", export))
    app.add_handler(CommandHandler("subscribe", subscribe))
    app.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    try:
        app.run_polling()
    except KeyboardInterrupt:
        logger.info("Bot stopped by user")
    finally:
        # Graceful shutdown
        try:
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            try:
                loop.run_until_complete(analytics.close())
            finally:
                loop.close()
        except Exception as e:
            logger.error(f"Error closing analytics: {e}")

if __name__ == "__main__":
    main()
