#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞.
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö user_analytics.db.
"""

import asyncio
import sys
from datetime import date, timedelta
from user_analytics import analytics


async def show_all_data():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
    try:
        import aiosqlite
        async with aiosqlite.connect(analytics.db_path) as db:
            cursor = await db.execute("""
                SELECT user_id, username, request_date, tokens_used, created_at
                FROM user_analytics 
                ORDER BY created_at DESC
                LIMIT 50
            """)
            
            results = await cursor.fetchall()
            
            if not results:
                print("üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞ - –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç.")
                return
                
            print("üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ 50 –∑–∞–ø–∏—Å–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:")
            print("-" * 80)
            print(f"{'User ID':<12} {'Username':<15} {'Date':<12} {'Tokens':<8} {'Created At':<20}")
            print("-" * 80)
            
            for row in results:
                user_id, username, req_date, tokens, created_at = row
                username_short = (username[:12] + "...") if username and len(username) > 15 else (username or "N/A")
                print(f"{user_id:<12} {username_short:<15} {req_date:<12} {tokens:<8} {created_at[:19]:<20}")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")


async def show_user_stats():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º."""
    try:
        import aiosqlite
        async with aiosqlite.connect(analytics.db_path) as db:
            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
            cursor = await db.execute("""
                SELECT 
                    user_id, 
                    username,
                    SUM(tokens_used) as total_tokens,
                    COUNT(*) as requests_count,
                    MIN(request_date) as first_date,
                    MAX(request_date) as last_date
                FROM user_analytics 
                GROUP BY user_id, username
                ORDER BY total_tokens DESC
            """)
            
            results = await cursor.fetchall()
            
            if not results:
                print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç–∞.")
                return
                
            print("\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:")
            print("-" * 90)
            print(f"{'User ID':<12} {'Username':<15} {'Total Tokens':<12} {'Requests':<10} {'First Use':<12} {'Last Use':<12}")
            print("-" * 90)
            
            for row in results:
                user_id, username, total_tokens, requests, first_date, last_date = row
                username_short = (username[:12] + "...") if username and len(username) > 15 else (username or "N/A")
                print(f"{user_id:<12} {username_short:<15} {total_tokens:<12} {requests:<10} {first_date:<12} {last_date:<12}")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")


async def show_daily_stats():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –¥–Ω—è–º."""
    try:
        import aiosqlite
        async with aiosqlite.connect(analytics.db_path) as db:
            cursor = await db.execute("""
                SELECT 
                    request_date,
                    COUNT(DISTINCT user_id) as unique_users,
                    COUNT(*) as total_requests,
                    SUM(tokens_used) as total_tokens,
                    AVG(tokens_used) as avg_tokens
                FROM user_analytics 
                GROUP BY request_date
                ORDER BY request_date DESC
                LIMIT 30
            """)
            
            results = await cursor.fetchall()
            
            if not results:
                print("üìä –î–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É—Å—Ç–∞.")
                return
                
            print("\nüìÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π):")
            print("-" * 80)
            print(f"{'Date':<12} {'Users':<8} {'Requests':<10} {'Total Tokens':<12} {'Avg Tokens':<12}")
            print("-" * 80)
            
            for row in results:
                req_date, unique_users, total_requests, total_tokens, avg_tokens = row
                avg_tokens_rounded = round(avg_tokens, 1) if avg_tokens else 0
                print(f"{req_date:<12} {unique_users:<8} {total_requests:<10} {total_tokens:<12} {avg_tokens_rounded:<12}")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")


async def show_database_info():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
    try:
        import aiosqlite
        import os
        
        if not os.path.exists(analytics.db_path):
            print(f"‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {analytics.db_path}")
            return
            
        file_size = os.path.getsize(analytics.db_path)
        
        async with aiosqlite.connect(analytics.db_path) as db:
            # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
            cursor = await db.execute("SELECT COUNT(*) FROM user_analytics")
            total_records = (await cursor.fetchone())[0]
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            cursor = await db.execute("SELECT COUNT(DISTINCT user_id) FROM user_analytics")
            unique_users = (await cursor.fetchone())[0]
            
            # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤
            cursor = await db.execute("SELECT SUM(tokens_used) FROM user_analytics")
            total_tokens = (await cursor.fetchone())[0] or 0
            
            # –î–∞—Ç–∞ –ø–µ—Ä–≤–æ–π –∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–ø–∏—Å–∏
            cursor = await db.execute("SELECT MIN(created_at), MAX(created_at) FROM user_analytics")
            date_range = await cursor.fetchone()
            
            print(f"üóÉÔ∏è  –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:")
            print(f"   üìç –ü—É—Ç—å: {analytics.db_path}")
            print(f"   üìè –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size} –±–∞–π—Ç ({file_size/1024:.1f} KB)")
            print(f"   üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {total_records}")
            print(f"   üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {unique_users}")
            print(f"   üéØ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤: {total_tokens}")
            if date_range[0] and date_range[1]:
                print(f"   üìÖ –ü–µ—Ä–∏–æ–¥ –¥–∞–Ω–Ω—ã—Ö: {date_range[0][:19]} - {date_range[1][:19]}")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞–∑–µ: {e}")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏."""
    
    if len(sys.argv) > 1:
        command = sys.argv[1].lower()
        if command in ['help', '-h', '--help']:
            print("üîç –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
            print("  python view_analytics.py           - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ")
            print("  python view_analytics.py users     - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º") 
            print("  python view_analytics.py daily     - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º")
            print("  python view_analytics.py info      - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–∑–µ")
            print("  python view_analytics.py help      - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞")
            return
        elif command == 'users':
            await show_database_info()
            await show_user_stats()
            return
        elif command == 'daily':
            await show_database_info()
            await show_daily_stats()
            return
        elif command == 'info':
            await show_database_info()
            return
    
    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å—ë
    await show_database_info()
    await show_all_data()
    await show_user_stats()
    await show_daily_stats()


if __name__ == "__main__":
    print("üöÄ –ü—Ä–æ—Å–º–æ—Ç—Ä –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ Telegram GPT Bot")
    print("=" * 50)
    
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc() 